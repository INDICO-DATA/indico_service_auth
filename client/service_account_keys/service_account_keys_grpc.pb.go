// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service_account_keys.proto

package service_account_keys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceAccountKeysServiceClient is the client API for ServiceAccountKeysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAccountKeysServiceClient interface {
	Create(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error)
	List(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (ServiceAccountKeysService_ListClient, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (ServiceAccountKeysService_DeleteClient, error)
	Retrieve(ctx context.Context, in *ServiceAccountKeyRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error)
}

type serviceAccountKeysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAccountKeysServiceClient(cc grpc.ClientConnInterface) ServiceAccountKeysServiceClient {
	return &serviceAccountKeysServiceClient{cc}
}

func (c *serviceAccountKeysServiceClient) Create(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error) {
	out := new(ServiceAccountKey)
	err := c.cc.Invoke(ctx, "/ServiceAccountKeysService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountKeysServiceClient) List(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (ServiceAccountKeysService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceAccountKeysService_ServiceDesc.Streams[0], "/ServiceAccountKeysService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAccountKeysServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceAccountKeysService_ListClient interface {
	Recv() (*ServiceAccountKey, error)
	grpc.ClientStream
}

type serviceAccountKeysServiceListClient struct {
	grpc.ClientStream
}

func (x *serviceAccountKeysServiceListClient) Recv() (*ServiceAccountKey, error) {
	m := new(ServiceAccountKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceAccountKeysServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (ServiceAccountKeysService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceAccountKeysService_ServiceDesc.Streams[1], "/ServiceAccountKeysService/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAccountKeysServiceDeleteClient{stream}
	return x, nil
}

type ServiceAccountKeysService_DeleteClient interface {
	Send(*ServiceAccountKeyRequest) error
	Recv() (*ServiceAccountKey, error)
	grpc.ClientStream
}

type serviceAccountKeysServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *serviceAccountKeysServiceDeleteClient) Send(m *ServiceAccountKeyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceAccountKeysServiceDeleteClient) Recv() (*ServiceAccountKey, error) {
	m := new(ServiceAccountKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceAccountKeysServiceClient) Retrieve(ctx context.Context, in *ServiceAccountKeyRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error) {
	out := new(ServiceAccountKey)
	err := c.cc.Invoke(ctx, "/ServiceAccountKeysService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAccountKeysServiceServer is the server API for ServiceAccountKeysService service.
// All implementations must embed UnimplementedServiceAccountKeysServiceServer
// for forward compatibility
type ServiceAccountKeysServiceServer interface {
	Create(context.Context, *CredentialsRequest) (*ServiceAccountKey, error)
	List(*CredentialsRequest, ServiceAccountKeysService_ListServer) error
	Delete(ServiceAccountKeysService_DeleteServer) error
	Retrieve(context.Context, *ServiceAccountKeyRequest) (*ServiceAccountKey, error)
	mustEmbedUnimplementedServiceAccountKeysServiceServer()
}

// UnimplementedServiceAccountKeysServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAccountKeysServiceServer struct {
}

func (UnimplementedServiceAccountKeysServiceServer) Create(context.Context, *CredentialsRequest) (*ServiceAccountKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceAccountKeysServiceServer) List(*CredentialsRequest, ServiceAccountKeysService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceAccountKeysServiceServer) Delete(ServiceAccountKeysService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceAccountKeysServiceServer) Retrieve(context.Context, *ServiceAccountKeyRequest) (*ServiceAccountKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedServiceAccountKeysServiceServer) mustEmbedUnimplementedServiceAccountKeysServiceServer() {
}

// UnsafeServiceAccountKeysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAccountKeysServiceServer will
// result in compilation errors.
type UnsafeServiceAccountKeysServiceServer interface {
	mustEmbedUnimplementedServiceAccountKeysServiceServer()
}

func RegisterServiceAccountKeysServiceServer(s grpc.ServiceRegistrar, srv ServiceAccountKeysServiceServer) {
	s.RegisterService(&ServiceAccountKeysService_ServiceDesc, srv)
}

func _ServiceAccountKeysService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountKeysServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceAccountKeysService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountKeysServiceServer).Create(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountKeysService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CredentialsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceAccountKeysServiceServer).List(m, &serviceAccountKeysServiceListServer{stream})
}

type ServiceAccountKeysService_ListServer interface {
	Send(*ServiceAccountKey) error
	grpc.ServerStream
}

type serviceAccountKeysServiceListServer struct {
	grpc.ServerStream
}

func (x *serviceAccountKeysServiceListServer) Send(m *ServiceAccountKey) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceAccountKeysService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceAccountKeysServiceServer).Delete(&serviceAccountKeysServiceDeleteServer{stream})
}

type ServiceAccountKeysService_DeleteServer interface {
	Send(*ServiceAccountKey) error
	Recv() (*ServiceAccountKeyRequest, error)
	grpc.ServerStream
}

type serviceAccountKeysServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *serviceAccountKeysServiceDeleteServer) Send(m *ServiceAccountKey) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceAccountKeysServiceDeleteServer) Recv() (*ServiceAccountKeyRequest, error) {
	m := new(ServiceAccountKeyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceAccountKeysService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountKeysServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceAccountKeysService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountKeysServiceServer).Retrieve(ctx, req.(*ServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAccountKeysService_ServiceDesc is the grpc.ServiceDesc for ServiceAccountKeysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAccountKeysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceAccountKeysService",
	HandlerType: (*ServiceAccountKeysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceAccountKeysService_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ServiceAccountKeysService_Retrieve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ServiceAccountKeysService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _ServiceAccountKeysService_Delete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_account_keys.proto",
}
