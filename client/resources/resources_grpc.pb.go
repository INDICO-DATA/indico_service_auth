// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: resources.proto

package resources

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	CreateScope(ctx context.Context, opts ...grpc.CallOption) (ResourceService_CreateScopeClient, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ResourceService_ListClient, error)
	ListScope(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (ResourceService_ListScopeClient, error)
	Update(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error)
	UpdateScope(ctx context.Context, opts ...grpc.CallOption) (ResourceService_UpdateScopeClient, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (ResourceService_DeleteClient, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/ResourceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateScope(ctx context.Context, opts ...grpc.CallOption) (ResourceService_CreateScopeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[0], "/ResourceService/CreateScope", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceCreateScopeClient{stream}
	return x, nil
}

type ResourceService_CreateScopeClient interface {
	Send(*ResourceScope) error
	Recv() (*ResourceScope, error)
	grpc.ClientStream
}

type resourceServiceCreateScopeClient struct {
	grpc.ClientStream
}

func (x *resourceServiceCreateScopeClient) Send(m *ResourceScope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceServiceCreateScopeClient) Recv() (*ResourceScope, error) {
	m := new(ResourceScope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ResourceService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[1], "/ResourceService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceService_ListClient interface {
	Recv() (*Resource, error)
	grpc.ClientStream
}

type resourceServiceListClient struct {
	grpc.ClientStream
}

func (x *resourceServiceListClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceServiceClient) ListScope(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (ResourceService_ListScopeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[2], "/ResourceService/ListScope", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceListScopeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceService_ListScopeClient interface {
	Recv() (*ResourceScope, error)
	grpc.ClientStream
}

type resourceServiceListScopeClient struct {
	grpc.ClientStream
}

func (x *resourceServiceListScopeClient) Recv() (*ResourceScope, error) {
	m := new(ResourceScope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceServiceClient) Update(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/ResourceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateScope(ctx context.Context, opts ...grpc.CallOption) (ResourceService_UpdateScopeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[3], "/ResourceService/UpdateScope", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceUpdateScopeClient{stream}
	return x, nil
}

type ResourceService_UpdateScopeClient interface {
	Send(*ResourceScope) error
	Recv() (*ResourceScope, error)
	grpc.ClientStream
}

type resourceServiceUpdateScopeClient struct {
	grpc.ClientStream
}

func (x *resourceServiceUpdateScopeClient) Send(m *ResourceScope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceServiceUpdateScopeClient) Recv() (*ResourceScope, error) {
	m := new(ResourceScope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (ResourceService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[4], "/ResourceService/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceDeleteClient{stream}
	return x, nil
}

type ResourceService_DeleteClient interface {
	Send(*QueryResourceRequest) error
	Recv() (*Resource, error)
	grpc.ClientStream
}

type resourceServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *resourceServiceDeleteClient) Send(m *QueryResourceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceServiceDeleteClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	Create(context.Context, *CreateResourceRequest) (*Resource, error)
	CreateScope(ResourceService_CreateScopeServer) error
	List(*empty.Empty, ResourceService_ListServer) error
	ListScope(*QueryResourceRequest, ResourceService_ListScopeServer) error
	Update(context.Context, *Resource) (*Resource, error)
	UpdateScope(ResourceService_UpdateScopeServer) error
	Delete(ResourceService_DeleteServer) error
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (UnimplementedResourceServiceServer) Create(context.Context, *CreateResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceServiceServer) CreateScope(ResourceService_CreateScopeServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedResourceServiceServer) List(*empty.Empty, ResourceService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourceServiceServer) ListScope(*QueryResourceRequest, ResourceService_ListScopeServer) error {
	return status.Errorf(codes.Unimplemented, "method ListScope not implemented")
}
func (UnimplementedResourceServiceServer) Update(context.Context, *Resource) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceServiceServer) UpdateScope(ResourceService_UpdateScopeServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateScope not implemented")
}
func (UnimplementedResourceServiceServer) Delete(ResourceService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResourceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).Create(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateScope_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceServiceServer).CreateScope(&resourceServiceCreateScopeServer{stream})
}

type ResourceService_CreateScopeServer interface {
	Send(*ResourceScope) error
	Recv() (*ResourceScope, error)
	grpc.ServerStream
}

type resourceServiceCreateScopeServer struct {
	grpc.ServerStream
}

func (x *resourceServiceCreateScopeServer) Send(m *ResourceScope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceServiceCreateScopeServer) Recv() (*ResourceScope, error) {
	m := new(ResourceScope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).List(m, &resourceServiceListServer{stream})
}

type ResourceService_ListServer interface {
	Send(*Resource) error
	grpc.ServerStream
}

type resourceServiceListServer struct {
	grpc.ServerStream
}

func (x *resourceServiceListServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceService_ListScope_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryResourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).ListScope(m, &resourceServiceListScopeServer{stream})
}

type ResourceService_ListScopeServer interface {
	Send(*ResourceScope) error
	grpc.ServerStream
}

type resourceServiceListScopeServer struct {
	grpc.ServerStream
}

func (x *resourceServiceListScopeServer) Send(m *ResourceScope) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResourceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).Update(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateScope_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceServiceServer).UpdateScope(&resourceServiceUpdateScopeServer{stream})
}

type ResourceService_UpdateScopeServer interface {
	Send(*ResourceScope) error
	Recv() (*ResourceScope, error)
	grpc.ServerStream
}

type resourceServiceUpdateScopeServer struct {
	grpc.ServerStream
}

func (x *resourceServiceUpdateScopeServer) Send(m *ResourceScope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceServiceUpdateScopeServer) Recv() (*ResourceScope, error) {
	m := new(ResourceScope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceServiceServer).Delete(&resourceServiceDeleteServer{stream})
}

type ResourceService_DeleteServer interface {
	Send(*Resource) error
	Recv() (*QueryResourceRequest, error)
	grpc.ServerStream
}

type resourceServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *resourceServiceDeleteServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceServiceDeleteServer) Recv() (*QueryResourceRequest, error) {
	m := new(QueryResourceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ResourceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourceService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateScope",
			Handler:       _ResourceService_CreateScope_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _ResourceService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListScope",
			Handler:       _ResourceService_ListScope_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateScope",
			Handler:       _ResourceService_UpdateScope_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _ResourceService_Delete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "resources.proto",
}
