// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: integrations.proto

package integrations

import (
	context "context"
	auth "github.com/indicoinnovation/indico_service_auth/client/auth"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntegrationsServiceClient is the client API for IntegrationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationsServiceClient interface {
	GenerateJWT(ctx context.Context, in *GenerateJWTRequest, opts ...grpc.CallOption) (*auth.AuthToken, error)
	ValidateJWT(ctx context.Context, in *ValidateJWTRequest, opts ...grpc.CallOption) (*auth.AuthToken, error)
}

type integrationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationsServiceClient(cc grpc.ClientConnInterface) IntegrationsServiceClient {
	return &integrationsServiceClient{cc}
}

func (c *integrationsServiceClient) GenerateJWT(ctx context.Context, in *GenerateJWTRequest, opts ...grpc.CallOption) (*auth.AuthToken, error) {
	out := new(auth.AuthToken)
	err := c.cc.Invoke(ctx, "/IntegrationsService/GenerateJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsServiceClient) ValidateJWT(ctx context.Context, in *ValidateJWTRequest, opts ...grpc.CallOption) (*auth.AuthToken, error) {
	out := new(auth.AuthToken)
	err := c.cc.Invoke(ctx, "/IntegrationsService/ValidateJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationsServiceServer is the server API for IntegrationsService service.
// All implementations must embed UnimplementedIntegrationsServiceServer
// for forward compatibility
type IntegrationsServiceServer interface {
	GenerateJWT(context.Context, *GenerateJWTRequest) (*auth.AuthToken, error)
	ValidateJWT(context.Context, *ValidateJWTRequest) (*auth.AuthToken, error)
	mustEmbedUnimplementedIntegrationsServiceServer()
}

// UnimplementedIntegrationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationsServiceServer struct {
}

func (UnimplementedIntegrationsServiceServer) GenerateJWT(context.Context, *GenerateJWTRequest) (*auth.AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateJWT not implemented")
}
func (UnimplementedIntegrationsServiceServer) ValidateJWT(context.Context, *ValidateJWTRequest) (*auth.AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateJWT not implemented")
}
func (UnimplementedIntegrationsServiceServer) mustEmbedUnimplementedIntegrationsServiceServer() {}

// UnsafeIntegrationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationsServiceServer will
// result in compilation errors.
type UnsafeIntegrationsServiceServer interface {
	mustEmbedUnimplementedIntegrationsServiceServer()
}

func RegisterIntegrationsServiceServer(s grpc.ServiceRegistrar, srv IntegrationsServiceServer) {
	s.RegisterService(&IntegrationsService_ServiceDesc, srv)
}

func _IntegrationsService_GenerateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServiceServer).GenerateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegrationsService/GenerateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServiceServer).GenerateJWT(ctx, req.(*GenerateJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationsService_ValidateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServiceServer).ValidateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegrationsService/ValidateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServiceServer).ValidateJWT(ctx, req.(*ValidateJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationsService_ServiceDesc is the grpc.ServiceDesc for IntegrationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IntegrationsService",
	HandlerType: (*IntegrationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateJWT",
			Handler:    _IntegrationsService_GenerateJWT_Handler,
		},
		{
			MethodName: "ValidateJWT",
			Handler:    _IntegrationsService_ValidateJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations.proto",
}
