// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package serviceaccounts

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceAccountServiceClient is the client API for ServiceAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAccountServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ServiceAccount, error)
	GenerateCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*ServiceAccountCredentials, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ServiceAccountService_ListClient, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (ServiceAccountService_DeleteClient, error)
}

type serviceAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAccountServiceClient(cc grpc.ClientConnInterface) ServiceAccountServiceClient {
	return &serviceAccountServiceClient{cc}
}

func (c *serviceAccountServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ServiceAccount, error) {
	out := new(ServiceAccount)
	err := c.cc.Invoke(ctx, "/ServiceAccountService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) GenerateCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*ServiceAccountCredentials, error) {
	out := new(ServiceAccountCredentials)
	err := c.cc.Invoke(ctx, "/ServiceAccountService/GenerateCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ServiceAccountService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceAccountService_ServiceDesc.Streams[0], "/ServiceAccountService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAccountServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceAccountService_ListClient interface {
	Recv() (*ServiceAccount, error)
	grpc.ClientStream
}

type serviceAccountServiceListClient struct {
	grpc.ClientStream
}

func (x *serviceAccountServiceListClient) Recv() (*ServiceAccount, error) {
	m := new(ServiceAccount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceAccountServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (ServiceAccountService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceAccountService_ServiceDesc.Streams[1], "/ServiceAccountService/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAccountServiceDeleteClient{stream}
	return x, nil
}

type ServiceAccountService_DeleteClient interface {
	Send(*CredentialsRequest) error
	Recv() (*ServiceAccount, error)
	grpc.ClientStream
}

type serviceAccountServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *serviceAccountServiceDeleteClient) Send(m *CredentialsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceAccountServiceDeleteClient) Recv() (*ServiceAccount, error) {
	m := new(ServiceAccount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceAccountServiceServer is the server API for ServiceAccountService service.
// All implementations must embed UnimplementedServiceAccountServiceServer
// for forward compatibility
type ServiceAccountServiceServer interface {
	Create(context.Context, *CreateRequest) (*ServiceAccount, error)
	GenerateCredentials(context.Context, *CredentialsRequest) (*ServiceAccountCredentials, error)
	List(*empty.Empty, ServiceAccountService_ListServer) error
	Delete(ServiceAccountService_DeleteServer) error
	mustEmbedUnimplementedServiceAccountServiceServer()
}

// UnimplementedServiceAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAccountServiceServer struct {
}

func (UnimplementedServiceAccountServiceServer) Create(context.Context, *CreateRequest) (*ServiceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceAccountServiceServer) GenerateCredentials(context.Context, *CredentialsRequest) (*ServiceAccountCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCredentials not implemented")
}
func (UnimplementedServiceAccountServiceServer) List(*empty.Empty, ServiceAccountService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceAccountServiceServer) Delete(ServiceAccountService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceAccountServiceServer) mustEmbedUnimplementedServiceAccountServiceServer() {}

// UnsafeServiceAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAccountServiceServer will
// result in compilation errors.
type UnsafeServiceAccountServiceServer interface {
	mustEmbedUnimplementedServiceAccountServiceServer()
}

func RegisterServiceAccountServiceServer(s grpc.ServiceRegistrar, srv ServiceAccountServiceServer) {
	s.RegisterService(&ServiceAccountService_ServiceDesc, srv)
}

func _ServiceAccountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceAccountService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_GenerateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).GenerateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceAccountService/GenerateCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).GenerateCredentials(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceAccountServiceServer).List(m, &serviceAccountServiceListServer{stream})
}

type ServiceAccountService_ListServer interface {
	Send(*ServiceAccount) error
	grpc.ServerStream
}

type serviceAccountServiceListServer struct {
	grpc.ServerStream
}

func (x *serviceAccountServiceListServer) Send(m *ServiceAccount) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceAccountService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceAccountServiceServer).Delete(&serviceAccountServiceDeleteServer{stream})
}

type ServiceAccountService_DeleteServer interface {
	Send(*ServiceAccount) error
	Recv() (*CredentialsRequest, error)
	grpc.ServerStream
}

type serviceAccountServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *serviceAccountServiceDeleteServer) Send(m *ServiceAccount) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceAccountServiceDeleteServer) Recv() (*CredentialsRequest, error) {
	m := new(CredentialsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceAccountService_ServiceDesc is the grpc.ServiceDesc for ServiceAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceAccountService",
	HandlerType: (*ServiceAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceAccountService_Create_Handler,
		},
		{
			MethodName: "GenerateCredentials",
			Handler:    _ServiceAccountService_GenerateCredentials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ServiceAccountService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _ServiceAccountService_Delete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/service_account.proto",
}
